Goals:
    Specify a concrete set of clues

# Tasks:
    - Move core rules to a tuple node, not a conj
    - Change Free Vars to be a single reference and store 'shape' info in a separate shape env
        - When freezing, propogate this shape info appropriately into related calls.
        - This Likely involves propogating a set of invarients.
    - Go from SpecBuilder -> SpecProto -> Spec
        - SpecBuilder: Dynamically build up a spec like the way I am doing
        - SpecProto: A serialized spec. Something that can be elaborated from scratch to build up  
    - Passes:
        -Const Fold: implement reduces (sum, etc...)
        - Canonicalization
        - CSE
    - Figure out proof obligations
        - obligation pass
        - proof pass


# Scratchpad for canonicalization/cmp_key/CSE
# Goal: I want all terms to be eagerly cannonicalized and cached (via CSE)
# An alpha-equivalent term can be proved equivalent if it has the same cmp_key and has the same lambda level (not quite true)



# DONE
    - Implement propper symbol table for Free Vars and De bruijn indices for Bound vars.
    - Bound vars should use a placeholder Lambda and placeholder Bound Var. Then after constructing a term, immediately rewrite it.
    - Change Spec to SpecBuilder